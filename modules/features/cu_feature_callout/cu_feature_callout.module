<?php
/**
 * @file
 * Code for the Feature Callout feature.
 */

include_once 'cu_feature_callout.features.inc';


/**
 * Implements hook_theme_registry_alter().
 *
 * Let Drupal know that we've got bean--articles.tpl.php in our module
 * directory.
 */
function cu_feature_callout_theme_registry_alter(&$theme_registry) {

}

/**
 * TODO: Write doco.
 */
function cu_feature_callout_page_alter(&$page) {
  // Add cu slider css.
  drupal_add_css(drupal_get_path('module', 'cu_feature_callout') . '/css/cu_feature_callout.css');
}

/**
 * Implements preprocess_entity().
 *
 * Turns the social_link_collection field collection in to a item_list.
 */
function cu_feature_callout_preprocess_entity(&$vars) {
  $entity_type = $vars['elements']['#entity_type'];
  $bundle = $vars['elements']['#bundle'];

  // Only preprocess social_link beans.
  if ($entity_type == 'bean' && $bundle == 'feature_callout') {
    $grid_header = !empty($vars['elements']['#entity']->title) ? 'h3' : 'h2';
    // Get the number of columns for formatting.
    $columns = $vars['content']['field_callout_columns']['#items'][0]['value'];
    $size = $vars['content']['field_callout_image_size']['#items'][0]['value'];
    $style = isset($vars['content']['field_callout_style']) ? $vars['content']['field_callout_style']['#items'][0]['value'] : 'stacked';
    $style = ($columns == 1) ? 'stacked' : $style;
    // Find all the field_collection_items.
    $children = element_children($vars['content']['field_callouts']);
    $i = 0;
    $column_count = 1;
    foreach (element_children($vars['content']['field_callouts']) as $child) {
      $title = NULL;
      $image = NULL;
      $text = NULL;
      $url = NULL;
      $count = $i + 1;
      // Grab the field_collection_item entity.
      $fc_item = array_pop($vars['content']['field_callouts'][$child]['entity']['field_collection_item']);

      // Get title.
      if (!empty($fc_item['field_callout_title']['#items'])) {
        $title = $fc_item['field_callout_title']['#items'][0]['title'];
      }
      else {
          $title = NULL;
      }
      // Get URL.
      if (!empty($fc_item['field_callout_title']['#items'][0]['url'])) {
        $url = $fc_item['field_callout_title']['#items'][0];
      }

      // Get text content.
      if (!empty($fc_item['field_callout_text'])) {
        $text = $fc_item['field_callout_text'][0]['#markup'];
      }
      // Build image.
      if (isset($fc_item['field_callout_image']['#items'][0]['uri'])) {
        // Get image uri.
        $image_uri = $fc_item['field_callout_image']['#items'][0]['uri'];
        $build = array(
          '#theme' => 'image_style',
          '#style_name' => $size,
          '#path' => $image_uri,
          '#alt' => $fc_item['field_callout_image']['#items'][0]['alt'],
        );
        $image = drupal_render($build);
        $image_url = image_style_url($size, $image_uri);
      }

      // Remove title if link url field was used but link title field was not.
      // Leaving title field blank results in url being inserted as the title.
      // Check to see if title is a url BEFORE making the link, not after.
      // Checking after would have all titles include a url.
      if (isset($fc_item['field_callout_title']['#items'][0]['title']) && isset($fc_item['field_callout_title']['#items'][0]['url']) && ($fc_item['field_callout_title']['#items'][0]['title'] == $fc_item['field_callout_title']['#items'][0]['url'])) {
        $title = '';
      }
      if (strpos($title,'http') !== false) {
        $title = '';
      }

      // Make links if $url is set.
      if (isset($url)) {
        // Set empty query and fragment variables.
        if (!isset($url['query'])) {
          $url['query'] = '';
        }
        if (!isset($url['fragment'])) {
          $url['fragment'] = '';
        }

        if (isset($title)) {
          $title = '<span>' . $title . '</span>';
          $title = '<' . $grid_header . ' class="feature-callout-title">' . l($title, $url['url'], array('html' => TRUE, 'query' => $url['query'], 'fragment' => $url['fragment'])) . '</' . $grid_header . '>';
        } else {
          $title = '';
        }
        if (isset($image)) {
          $image = l($image, $url['url'], array('html' => TRUE, 'query' => $url['query'], 'fragment' => $url['fragment']));
        } else {
          $image = '';
          $image_url = '';
        }
      }
      else {
        if (isset($title)) {
          $title = '<' . $grid_header . ' class="feature-callout-title"><span>' . $title . '</span></' . $grid_header . '>';
        } else {
          $title = '';
        }
      }

      // Create an array of items.
      $items[$i]['#markup'] = '<div class="feature-callout-item feature-callout-column-' . $column_count . ' clearfix">' . $image . '<div class="feature-callout-text clearfix">' . $title . '<div class="field-type-text-long">' . $text . '</div></div></div>';

      $variables['column_count'] = $column_count;
      $variables['title'] = $title;
      $variables['image'] = $image;
      $variables['image_url'] = $image_url;
      $variables['text'] = $text;


      $column_classes[1] = 'col-lg-12 col-md-12 col-sm-12 col-xs-12';
      $column_classes[2] = 'col-lg-6 col-md-6 col-sm-6 col-xs-12 col-lg-clear-after-2 col-md-clear-after-2 col-sm-clear-after-2';
      $column_classes[3] = 'col-lg-4 col-md-4 col-sm-6 col-xs-12 col-lg-clear-after-3 col-md-clear-after-3 col-sm-clear-after-2';
      $column_classes[4] = 'col-lg-3 col-md-3 col-sm-6 col-xs-12 col-lg-clear-after-4 col-md-clear-after-4 col-sm-clear-after-2';
      $column_classes[5] = 'col-lg-5c col-md-5c col-sm-6 col-xs-12 col-lg-clear-after-5 col-md-clear-after-5 col-sm-clear-after-2';

      $variables['column_classes'] = $column_classes[$columns];

      $items[$i]['#markup'] = theme('cu_feature_callout_' . $style, $variables);


      if ($column_count == $columns) {
        $column_count = 0;
      }
      $i++;
      $column_count++;
    }

    // Remove the current field collection from display.
    unset($vars['content']['field_callouts']);
    unset($vars['content']['field_callout_columns']);
    unset($vars['content']['field_callout_image_size']);
    unset($vars['content']['field_callout_style']);
    $classes[] = 'feature-callout';
    $classes[] = 'feature-callout-columns-' . $columns;
    $classes[] = 'feature-callout-style-' . $style;
    $classes[] = 'clearfix';
    $classes[] = 'row';
    $classes = join(' ', $classes);
    if (isset($items)) {
      // Generate an item_list of our items and add to $content.
      $vars['content']['field_callouts'] = $items;
      $vars['content']['field_callouts']['#prefix'] = '<div class="' . $classes . '">';
      $vars['content']['field_callouts']['#suffix'] = '</div>';

    }
  }
}

function cu_feature_callout_theme(&$existing, $type, $theme, $path) {
  $registry = array();
  $template_dir = drupal_get_path('module', 'cu_feature_callout') . '/templates';
  $registry['cu_feature_callout_stacked'] = array(
    'template' => 'cu_feature_callout_stacked',
    'path' => $template_dir,
    'render element' => 'elements',
  );
  $registry['cu_feature_callout_overlay'] = array(
    'template' => 'cu_feature_callout_overlay',
    'path' => $template_dir,
    'render element' => 'elements',
  );
  return $registry;
}

function cu_feature_callout_form_bean_form_alter(&$form, &$form_state, $form_id) {

  if ($form['bean']['#value']->type == 'feature_callout') {
    $form['field_callout_style']['#states'] = array(
      'invisible' => array(
    	   ':input[name="field_callout_columns[und]"]' => array('value' => '1'),
      ),
    );
  }
}
